{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes memory signature\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly (\"memory-safe\") {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[ERC-2098 short signatures]\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"
    },
    "contracts/HelloWorld.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\ncontract HelloWorld {\n    string private message;\n\n    function setMessage(string memory _newMessage) public {\n        message = _newMessage;\n    }\n\n    function getMessage() public view returns (string memory) {\n        return message;\n    }\n}\n"
    },
    "contracts/IOTContractMonitoring.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract IOTContractMonitoring is Ownable {\n    struct Label {\n        uint id;\n        address sender;\n        address receiver;\n        bool sent;\n        bool received;\n        bool voided;\n    }\n\n    struct IoTDeviceInfo {\n        address device;\n        string location; // e.g. \"Moscow\"\n        // more fields (timestamp, deviceType, etc)\n    }\n\n    uint public labelCounter;\n\n    mapping(uint => Label) public labels;\n\n    mapping(address => bool) public authorizedLabelCreators;\n    mapping(address => bool) public authorizedIoTSenders;\n    mapping(address => bool) public authorizedIoTReceivers;\n\n    // to store extra data of device\n    mapping(address => IoTDeviceInfo) public deviceInfo;\n\n    event LabelCreated(uint labelId, address sender, address receiver);\n    event LabelSent(uint labelId, address sender);\n    event LabelReceived(uint labelId, address receiver);\n    event LabelVoided(uint labelId, address by);\n\n    modifier onlyLabelCreator() {\n        require(\n            authorizedLabelCreators[msg.sender],\n            \"Not an authorized Label Creator\"\n        );\n        _;\n    }\n\n    modifier onlyIoTSender() {\n        require(\n            authorizedIoTSenders[msg.sender],\n            \"Not an authorized IoT Sender\"\n        );\n        _;\n    }\n\n    modifier onlyIoTReceiver() {\n        require(\n            authorizedIoTReceivers[msg.sender],\n            \"Not an authorized IoT Receiver\"\n        );\n        _;\n    }\n\n    modifier onlyIoTDevice() {\n        require(\n            authorizedIoTSenders[msg.sender] ||\n                authorizedIoTReceivers[msg.sender],\n            \"Not an authorized IoT Device\"\n        );\n        _;\n    }\n\n    constructor(address initialOwner) Ownable(initialOwner) {}\n\n    // ------------------------------------------------------------------------\n    // Combined functions to set or unset authorization with a single call.\n    // Set `_status` to `true` to authorize, `false` to de-authorize.\n    // ------------------------------------------------------------------------\n\n    function setLabelCreatorAuthorization(\n        address _account,\n        bool _status\n    ) external onlyOwner {\n        authorizedLabelCreators[_account] = _status;\n    }\n\n    /**\n     * @dev This single function toggles (de)authorization\n     *     for IoT Sender and/or IoT Receiver in one call.\n     * @param _asSender   Set true if you want to (de)authorize as Sender\n     * @param _asReceiver Set true if you want to (de)authorize as Receiver\n     * @param _status     True = authorize, False = de-authorize\n     */\n    function setIoTAuthorization(\n        address _account,\n        bool _asSender,\n        bool _asReceiver,\n        bool _status\n    ) external onlyOwner {\n        if (_asSender) {\n            authorizedIoTSenders[_account] = _status;\n        }\n        if (_asReceiver) {\n            authorizedIoTReceivers[_account] = _status;\n        }\n    }\n\n    /**\n     * @notice Optionally store extra device info (like location).\n     *         This can also be used to ensure that the device’s location\n     *         matches a Label’s destination, if your use-case requires it.\n     */\n    function setDeviceInfo(\n        address _device,\n        string calldata _location\n    ) external onlyOwner {\n        deviceInfo[_device] = IoTDeviceInfo({\n            device: _device,\n            location: _location\n        });\n    }\n\n    // ------------------------------------------------------------------------\n    // Core label logic\n    // ------------------------------------------------------------------------\n\n    function createLabel(\n        uint _labelId,\n        address _sender,\n        address _receiver\n    ) external onlyLabelCreator {\n        require(_receiver != address(0), \"Invalid receiver address\");\n        require(authorizedIoTSenders[_sender], \"Sender not authorized\");\n\n        labelCounter++;\n        labels[_labelId] = Label({\n            id: _labelId,\n            sender: _sender,\n            receiver: _receiver,\n            sent: false,\n            received: false,\n            voided: false\n        });\n\n        emit LabelCreated(labelCounter, _sender, _receiver);\n    }\n\n    function markAsSent(uint _labelId) external onlyIoTSender {\n        Label storage label = labels[_labelId];\n\n        require(label.id != 0, \"Label does not exist\");\n        require(!label.sent, \"Label already marked as sent\");\n        require(label.sender == msg.sender, \"Not the sender of this label\");\n\n        label.sent = true;\n        emit LabelSent(_labelId, msg.sender);\n    }\n\n    function markAsReceived(uint _labelId) external onlyIoTReceiver {\n        Label storage label = labels[_labelId];\n\n        require(label.id != 0, \"Label does not exist\");\n        require(label.sent, \"Label not marked as sent\");\n        require(!label.received, \"Label already marked as received\");\n        require(label.receiver == msg.sender, \"Not the receiver of this label\");\n\n        label.received = true;\n        emit LabelReceived(_labelId, msg.sender);\n    }\n\n    // “Void” a label. For example if the package is lost or returned.\n    function voidLabel(uint _labelId) external onlyIoTDevice {\n        Label storage label = labels[_labelId];\n\n        require(label.id != 0, \"Label does not exist\");\n        require(!label.voided, \"Label already voided\");\n\n        label.voided = true;\n        emit LabelVoided(_labelId, msg.sender);\n    }\n}\n"
    },
    "contracts/old-IOTContractMonitoring.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\ncontract oldIOTContractMonitoring is Ownable {\n    using ECDSA for bytes32;\n\n    // Метки для отслеживания\n    struct Label {\n        uint id;\n        address sender;\n        address receiver;\n        bool sent;\n        bool received;\n        bool voided;\n    }\n\n    uint public labelCounter;\n\n    mapping(uint => Label) public labels; // Метки по ID\n\n    // Списки авторизованных адресов\n    mapping(address => bool) public authorizedLabelCreators;\n    mapping(address => bool) public authorizedIoTSenders;\n    mapping(address => bool) public authorizedIoTReceivers;\n\n    // События\n    event LabelCreated(uint labelId, address sender, address receiver);\n    event LabelSent(uint labelId, address sender);\n    event LabelReceived(uint labelId, address receiver);\n    event LabelVoided(uint labelId, address by);\n\n    // Модификаторы ролей\n    modifier onlyLabelCreator() {\n        require(\n            authorizedLabelCreators[msg.sender],\n            \"Not an authorized Label Creator\"\n        );\n        _;\n    }\n\n    modifier onlyIoTSender() {\n        require(\n            authorizedIoTSenders[msg.sender],\n            \"Not an authorized IoT Sender\"\n        );\n        _;\n    }\n\n    modifier onlyIoTReceiver() {\n        require(\n            authorizedIoTReceivers[msg.sender],\n            \"Not an authorized IoT Receiver\"\n        );\n        _;\n    }\n\n    modifier onlyIoTDevice() {\n        require(\n            authorizedIoTSenders[msg.sender] ||\n                authorizedIoTReceivers[msg.sender],\n            \"Not an authorized IoT Device\"\n        );\n        _;\n    }\n\n    constructor(address initialOwner) Ownable(initialOwner) {}\n\n    // Управление ролями (доступно только админу)\n    function authorizeLabelCreator(\n        address _account,\n        bool _status\n    ) external onlyOwner {\n        authorizedLabelCreators[_account] = _status;\n    }\n\n    function authorizeIoTSender(\n        address _account,\n        bool _status\n    ) external onlyOwner {\n        authorizedIoTSenders[_account] = _status;\n    }\n\n    function authorizeIoTReceiver(\n        address _account,\n        bool _status\n    ) external onlyOwner {\n        authorizedIoTReceivers[_account] = _status;\n    }\n\n    // Создание метки\n    function createLabel(\n        address _sender,\n        address _receiver\n    ) external onlyLabelCreator {\n        require(_receiver != address(0), \"Invalid receiver address\");\n        require(authorizedIoTSenders[_sender], \"Sender not authorized\");\n\n        labelCounter++;\n        labels[labelCounter] = Label({\n            id: labelCounter,\n            sender: _sender,\n            receiver: _receiver,\n            sent: false,\n            received: false,\n            voided: false\n        });\n\n        emit LabelCreated(labelCounter, _sender, _receiver);\n    }\n\n    // Отметка \"Sent\"\n    function markAsSent(uint _labelId) external onlyIoTSender {\n        Label storage label = labels[_labelId];\n\n        require(label.id != 0, \"Label does not exist\");\n        require(!label.sent, \"Label already marked as sent\");\n        require(label.sender == msg.sender, \"Not the sender of this label\");\n\n        label.sent = true;\n\n        emit LabelSent(_labelId, msg.sender);\n    }\n\n    // Отметка \"Received\"\n    function markAsReceived(uint _labelId) external onlyIoTReceiver {\n        Label storage label = labels[_labelId];\n\n        require(label.id != 0, \"Label does not exist\");\n        require(label.sent, \"Label not marked as sent\");\n        require(!label.received, \"Label already marked as received\");\n        require(label.receiver == msg.sender, \"Not the receiver of this label\");\n\n        label.received = true;\n\n        emit LabelReceived(_labelId, msg.sender);\n    }\n\n    // отменить или изменить статус метки\n    function voidLabel(uint _labelId) external onlyIoTDevice {\n        Label storage label = labels[_labelId];\n\n        require(label.id != 0, \"Label does not exist\");\n        require(!label.voided, \"Label already voided\");\n\n        label.voided = true;\n\n        emit LabelVoided(_labelId, msg.sender);\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}